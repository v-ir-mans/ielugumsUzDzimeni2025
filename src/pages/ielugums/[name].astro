---
import Layout from '../../layouts/Layout.astro';
import Paraksts from '../../assets/paraksts.svg'
import BlackShow from '../../components/blackShow.astro';

import names from '../../assets/vardi.json';

export function getStaticPaths() {
  return Object.keys(names).map(key => ({
    params: { name: key },
    props: { fullName: names[key], code: key  }
  }));
}

const { fullName, code } = Astro.props;

const links = [
  { name: "WWF", url: "https://www.worldwildlife.org/" },
  { name: "Example 1", url: "https://example.com" },
  { name: "Example 2", url: "https://example.org" },
  { name: "Example 3", url: "https://example.net" },
];

---

<Layout>

	<div id="main" class="relative  w-dvw min-h-dvh h-max grid grid-cols-[auto_1fr] grid-rows-[auto_1fr] bg-center bg-cover bg-[url('../assets/compbcg.jpg')]">
		
		<div class=" bg-black/0 backdrop-grayscale-200 col-span-2 h-12 flex items-center justify-end">
			<div id="clock" class=" shadow-2xl mr-1">
				<p>1742728444</p>
			</div>
			
		</div>
		<div class="  bg-black/24= backdrop-grayscale-200 w-12"></div>
		<div class="  text-3xl text-yellow-300 pr-12">
		<p class="text-4xl font-bold italic mb-2.5">Sveiki!</p>
		<p class=" whitespace-pre-line text-amber-50">Šī gada <span class=" opacity-60">(loģiski)</span> 21. maijā man būs 20 gadi. Un 24. maijā man būs svinības <span class=" opacity-60">(iemesls minēts 1. teikumā)</span>. 
			Es Tevi, {fullName}, mīļi <span class=" opacity-60">(cerams, ka sanāk)</span> ielūdzu uz svinībām! 
			Tās notiks Arņa mājās [Es nezinu adresi] plkst 14.45. 
			Programma vēl nav pilnīgi izstrādāta, bet, cerams, būs jautri. Tātad vēlreiz īsumā: 

		</p>	
		<ul class=" italic list-disc mt-3">
				<li>20 gadi;</li>
				<li>24. maijs;</li>
				<li>Arņa mājas;</li>
				<li>plkst: 14.45. </li>
		</ul>		

		</ul>
		<p class=" text-yellow-300 opacity-60 mt-2 mb-3 ">(Papildu informācija lejā!)</p>
		<p class=" text-amber-50">Super, tagad tev viss ir skaidrs! Lai paziņotu, vai ieradīsies, spied <a href={`/ielugums/atbilde/${code}`} class=" bg-yellow-300 text-black px-4 rounded-sm font-bold">šeit</a> . </p> 
		<p class=" text-amber-50 font-bold my-2">Gaidīšu!</p>
		<img class="h-52 my-6 fill-amber-50" src={Paraksts.src}></img>
		<p class="font-bold italic text-4xl mb-4">Par dāvanām:  </p>
		<p class=" text-white">Man nevajag dāvanas. Nopietni. Tas nav joks, vai pārspīlējums vai dīvaina pieklājība. 20 gados man tāpat ir sakrājies pārāk daudz lietu. Ja tev nu ļoti gribas kaut ko uzdāvināt, lūdzu, ziedo kādai no šīm labdarībām: </p>
		
		<div class=" flex flex-col mt-7 max-w-7xl gap-4 bg-blend-difference opacity-75 italic">		
		
		{links.map((link, i) => (
			<a
				href={link.url}
				class={` text-black px-4 rounded-sm h-12 flex items-center ${i % 2 === 0 ? 'bg-yellow-300' : ' bg-white'}`}
			>
				{link.name}
			</a>
		))}

		</div>
		<p class=" h-24 flex items-center">Paldies!</p>

		<BlackShow></BlackShow>
	</div>
	</div>	

	

	<script is:inline>
		// Function to update the background position
		function updateBackgroundPosition() {
			const scrollY = window.scrollY || window.pageYOffset; // Get the amount scrolled
	
			// Select the #main element
			const mainElement = document.getElementById('main');
	
			// Calculate the initial offset to center the background image
			const mainWidth = mainElement.offsetWidth; 
			const backgroundWidth = 2000; // Width of the background image
			const initialOffset = (mainWidth - backgroundWidth)
	
			// Adjust the background-x position based on the scroll amount
			const backgroundX = initialOffset - scrollY;
	
			// Apply the new background-x position to the #main element
			mainElement.style.backgroundPosition = `calc(40% - ${scrollY}px) 50%`;
		}
	
		// Run the function on page load
		window.addEventListener('load', updateBackgroundPosition);
	
		// Run the function on scroll
		window.addEventListener('scroll', updateBackgroundPosition);
	</script>
</Layout>


<script>
    // Function to update the clock
    function updateClock() {
        const clockElement = document.getElementById('clock').querySelector('p');
        const now = Math.floor(Date.now() / 1000); // Current Unix timestamp in seconds
        const targetDate = new Date('2025-05-25T00:00:00Z').getTime() / 1000; // Unix timestamp for July 4, 2025
        const difference = targetDate - now; // Difference in seconds

        // Convert difference to days and hours
        const hours = Math.floor(difference / 3600.0 );

        // Update the content of the <p> element
        clockElement.textContent = `Cur: ${now} | Target: ${targetDate} | Dif: ${hours}h`;
    }

    // Update the clock every 100ms
    setInterval(updateClock, 100);

    // Initial call to display the clock immediately
    updateClock();
</script>
